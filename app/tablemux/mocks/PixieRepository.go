// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "github.com/kataras/iris/v12/context"
	mock "github.com/stretchr/testify/mock"
	pxapi "px.dev/pxapi"
	tablemux "zk-api-server/app/tablemux"

	"github.com/zerok-ai/zk-utils-go/zkerrors"
)

// PixieRepository is an autogenerated mock type for the PixieRepository type
type PixieRepository struct {
	mock.Mock
}

// GetPixieData provides a mock function with given fields: ctx, t, tx, clusterId, apiKey, domain
func (_m *PixieRepository) GetPixieData(ctx *context.Context, t pxapi.TableMuxer, tx tablemux.MethodTemplate, clusterId string, apiKey string, domain string) (*pxapi.ScriptResults, *zkerrors.ZkError) {
	ret := _m.Called(ctx, t, tx, clusterId, apiKey, domain)

	var r0 *pxapi.ScriptResults
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, pxapi.TableMuxer, tablemux.MethodTemplate, string, string, string) (*pxapi.ScriptResults, *zkerrors.ZkError)); ok {
		return rf(ctx, t, tx, clusterId, apiKey, domain)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, pxapi.TableMuxer, tablemux.MethodTemplate, string, string, string) *pxapi.ScriptResults); ok {
		r0 = rf(ctx, t, tx, clusterId, apiKey, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pxapi.ScriptResults)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, pxapi.TableMuxer, tablemux.MethodTemplate, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, t, tx, clusterId, apiKey, domain)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewPixieRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPixieRepository creates a new instance of PixieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPixieRepository() *PixieRepository {
	mock := &PixieRepository{}

	return mock
}
