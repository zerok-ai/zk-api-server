// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zerok-ai/zk-utils-go/rules/model"

	repository "main/app/scenario/repository"

	zkerrors "main/app/utils/zkerrors"
)

// ScenarioRepo is an autogenerated mock type for the ScenarioRepo type
type ScenarioRepo struct {
	mock.Mock
}

// GetAllScenario provides a mock function with given fields: filters
func (_m *ScenarioRepo) GetAllScenario(filters *repository.ScenarioQueryFilter) (*[]model.Scenario, *[]string, *zkerrors.ZkError) {
	ret := _m.Called(filters)

	var r0 *[]model.Scenario
	var r1 *[]string
	var r2 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*repository.ScenarioQueryFilter) (*[]model.Scenario, *[]string, *zkerrors.ZkError)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(*repository.ScenarioQueryFilter) *[]model.Scenario); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Scenario)
		}
	}

	if rf, ok := ret.Get(1).(func(*repository.ScenarioQueryFilter) *[]string); ok {
		r1 = rf(filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]string)
		}
	}

	if rf, ok := ret.Get(2).(func(*repository.ScenarioQueryFilter) *zkerrors.ZkError); ok {
		r2 = rf(filters)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*zkerrors.ZkError)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewScenarioRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewScenarioRepo creates a new instance of ScenarioRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScenarioRepo() *ScenarioRepo {
	mock := &ScenarioRepo{}
	return mock
}
