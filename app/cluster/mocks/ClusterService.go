// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	handlerimplementation "main/app/tablemux/handlerimplementation"

	context "github.com/kataras/iris/v12/context"

	mock "github.com/stretchr/testify/mock"

	transformer "main/app/cluster/transformer"

	zkerrors "main/app/utils/zkerrors"
)

// ClusterService is an autogenerated mock type for the ClusterService type
type ClusterService struct {
	mock.Mock
}

// GetNamespaceList provides a mock function with given fields: ctx, id, st, apiKey
func (_m *ClusterService) GetNamespaceList(ctx *context.Context, id string, st string, apiKey string) (*transformer.PixieHTTPResponse[string], *zkerrors.ZkError) {
	ret := _m.Called(ctx, id, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[string]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) (*transformer.PixieHTTPResponse[string], *zkerrors.ZkError)); ok {
		return rf(ctx, id, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) *transformer.PixieHTTPResponse[string]); ok {
		r0 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[string])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetPodDetailsTimeSeries provides a mock function with given fields: ctx, clusterIdx, podName, ns, st, apiKey
func (_m *ClusterService) GetPodDetailsTimeSeries(ctx *context.Context, clusterIdx string, podName string, ns string, st string, apiKey string) (*transformer.PodDetailsPixieHTTPResponse, *zkerrors.ZkError) {
	ret := _m.Called(ctx, clusterIdx, podName, ns, st, apiKey)

	var r0 *transformer.PodDetailsPixieHTTPResponse
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) (*transformer.PodDetailsPixieHTTPResponse, *zkerrors.ZkError)); ok {
		return rf(ctx, clusterIdx, podName, ns, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) *transformer.PodDetailsPixieHTTPResponse); ok {
		r0 = rf(ctx, clusterIdx, podName, ns, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PodDetailsPixieHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, clusterIdx, podName, ns, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetPodList provides a mock function with given fields: ctx, clusterIdx, name, ns, st, apiKey
func (_m *ClusterService) GetPodList(ctx *context.Context, clusterIdx string, name string, ns string, st string, apiKey string) (*transformer.PixieHTTPResponse[handlerimplementation.PodDetails], *zkerrors.ZkError) {
	ret := _m.Called(ctx, clusterIdx, name, ns, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[handlerimplementation.PodDetails]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) (*transformer.PixieHTTPResponse[handlerimplementation.PodDetails], *zkerrors.ZkError)); ok {
		return rf(ctx, clusterIdx, name, ns, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) *transformer.PixieHTTPResponse[handlerimplementation.PodDetails]); ok {
		r0 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[handlerimplementation.PodDetails])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetPxlData provides a mock function with given fields: ctx, clusterIdx, st, apiKey
func (_m *ClusterService) GetPxlData(ctx *context.Context, clusterIdx string, st string, apiKey string) (*transformer.PixieHTTPResponse[handlerimplementation.PixieTraceData], *zkerrors.ZkError) {
	ret := _m.Called(ctx, clusterIdx, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[handlerimplementation.PixieTraceData]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) (*transformer.PixieHTTPResponse[handlerimplementation.PixieTraceData], *zkerrors.ZkError)); ok {
		return rf(ctx, clusterIdx, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) *transformer.PixieHTTPResponse[handlerimplementation.PixieTraceData]); ok {
		r0 = rf(ctx, clusterIdx, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[handlerimplementation.PixieTraceData])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, clusterIdx, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetServiceDetails provides a mock function with given fields: ctx, clusterIdx, name, ns, st, apiKey
func (_m *ClusterService) GetServiceDetails(ctx *context.Context, clusterIdx string, name string, ns string, st string, apiKey string) (*transformer.PixieHTTPResponse[handlerimplementation.ServiceStat], *zkerrors.ZkError) {
	ret := _m.Called(ctx, clusterIdx, name, ns, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[handlerimplementation.ServiceStat]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) (*transformer.PixieHTTPResponse[handlerimplementation.ServiceStat], *zkerrors.ZkError)); ok {
		return rf(ctx, clusterIdx, name, ns, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) *transformer.PixieHTTPResponse[handlerimplementation.ServiceStat]); ok {
		r0 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[handlerimplementation.ServiceStat])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetServiceDetailsList provides a mock function with given fields: ctx, id, st, apiKey
func (_m *ClusterService) GetServiceDetailsList(ctx *context.Context, id string, st string, apiKey string) (*transformer.PixieHTTPResponse[handlerimplementation.Service], *zkerrors.ZkError) {
	ret := _m.Called(ctx, id, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[handlerimplementation.Service]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) (*transformer.PixieHTTPResponse[handlerimplementation.Service], *zkerrors.ZkError)); ok {
		return rf(ctx, id, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) *transformer.PixieHTTPResponse[handlerimplementation.Service]); ok {
		r0 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[handlerimplementation.Service])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetServiceDetailsMap provides a mock function with given fields: ctx, id, st, apiKey
func (_m *ClusterService) GetServiceDetailsMap(ctx *context.Context, id string, st string, apiKey string) (*transformer.PixieHTTPResponse[handlerimplementation.ServiceMap], *zkerrors.ZkError) {
	ret := _m.Called(ctx, id, st, apiKey)

	var r0 *transformer.PixieHTTPResponse[handlerimplementation.ServiceMap]
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) (*transformer.PixieHTTPResponse[handlerimplementation.ServiceMap], *zkerrors.ZkError)); ok {
		return rf(ctx, id, st, apiKey)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) *transformer.PixieHTTPResponse[handlerimplementation.ServiceMap]); ok {
		r0 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transformer.PixieHTTPResponse[handlerimplementation.ServiceMap])
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, string, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, id, st, apiKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewClusterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterService creates a new instance of ClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterService(t mockConstructorTestingTNewClusterService) *ClusterService {
	mock := &ClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
