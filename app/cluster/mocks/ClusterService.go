// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "github.com/kataras/iris/v12/context"
	mock "github.com/stretchr/testify/mock"

	models "main/app/cluster/models"

	zkerrors "main/app/utils/zkerrors"
)

// ClusterService is an autogenerated mock type for the ClusterService type
type ClusterService struct {
	mock.Mock
}

// DeleteCluster provides a mock function with given fields: ctx, clusterId
func (_m *ClusterService) DeleteCluster(ctx *context.Context, clusterId string) (int, *zkerrors.ZkError) {
	ret := _m.Called(ctx, clusterId)

	var r0 int
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, string) (int, *zkerrors.ZkError)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string) int); ok {
		r0 = rf(ctx, clusterId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string) *zkerrors.ZkError); ok {
		r1 = rf(ctx, clusterId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

// GetNamespaceList provides a mock function with given fields: ctx, id, st, apiKey
func (_m *ClusterService) GetNamespaceList(ctx *context.Context, id string, st string, apiKey string) models.PixieResponse {
	ret := _m.Called(ctx, id, st, apiKey)

	var r0 models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) models.PixieResponse); ok {
		r0 = rf(ctx, id, st, apiKey)
	} else {
		r0 = ret.Get(0).(models.PixieResponse)
	}

	return r0
}

// GetPodDetailsTimeSeries provides a mock function with given fields: ctx, clusterIdx, podName, ns, st, apiKey
func (_m *ClusterService) GetPodDetailsTimeSeries(ctx *context.Context, clusterIdx string, podName string, ns string, st string, apiKey string) map[string]models.PixieResponse {
	ret := _m.Called(ctx, clusterIdx, podName, ns, st, apiKey)

	var r0 map[string]models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) map[string]models.PixieResponse); ok {
		r0 = rf(ctx, clusterIdx, podName, ns, st, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.PixieResponse)
		}
	}

	return r0
}

// GetPodList provides a mock function with given fields: ctx, clusterIdx, name, ns, st, apiKey
func (_m *ClusterService) GetPodList(ctx *context.Context, clusterIdx string, name string, ns string, st string, apiKey string) models.PixieResponse {
	ret := _m.Called(ctx, clusterIdx, name, ns, st, apiKey)

	var r0 models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) models.PixieResponse); ok {
		r0 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		r0 = ret.Get(0).(models.PixieResponse)
	}

	return r0
}

// GetPxlData provides a mock function with given fields: ctx, clusterIdx, st, apiKey
func (_m *ClusterService) GetPxlData(ctx *context.Context, clusterIdx string, st string, apiKey string) models.PixieResponse {
	ret := _m.Called(ctx, clusterIdx, st, apiKey)

	var r0 models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string) models.PixieResponse); ok {
		r0 = rf(ctx, clusterIdx, st, apiKey)
	} else {
		r0 = ret.Get(0).(models.PixieResponse)
	}

	return r0
}

// GetResourceDetails provides a mock function with given fields: ctx, clusterIdx, action, st, apiKey
func (_m *ClusterService) GetResourceDetails(ctx *context.Context, clusterIdx string, action string, st string, apiKey string) models.PixieResponse {
	ret := _m.Called(ctx, clusterIdx, action, st, apiKey)

	var r0 models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string) models.PixieResponse); ok {
		r0 = rf(ctx, clusterIdx, action, st, apiKey)
	} else {
		r0 = ret.Get(0).(models.PixieResponse)
	}

	return r0
}

// GetServiceDetails provides a mock function with given fields: ctx, clusterIdx, name, ns, st, apiKey
func (_m *ClusterService) GetServiceDetails(ctx *context.Context, clusterIdx string, name string, ns string, st string, apiKey string) models.PixieResponse {
	ret := _m.Called(ctx, clusterIdx, name, ns, st, apiKey)

	var r0 models.PixieResponse
	if rf, ok := ret.Get(0).(func(*context.Context, string, string, string, string, string) models.PixieResponse); ok {
		r0 = rf(ctx, clusterIdx, name, ns, st, apiKey)
	} else {
		r0 = ret.Get(0).(models.PixieResponse)
	}

	return r0
}

// UpdateCluster provides a mock function with given fields: ctx, cluster
func (_m *ClusterService) UpdateCluster(ctx *context.Context, cluster models.ClusterDetails) (int, *zkerrors.ZkError) {
	ret := _m.Called(ctx, cluster)

	var r0 int
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*context.Context, models.ClusterDetails) (int, *zkerrors.ZkError)); ok {
		return rf(ctx, cluster)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, models.ClusterDetails) int); ok {
		r0 = rf(ctx, cluster)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, models.ClusterDetails) *zkerrors.ZkError); ok {
		r1 = rf(ctx, cluster)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewClusterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterService creates a new instance of ClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterService(t mockConstructorTestingTNewClusterService) *ClusterService {
	mock := &ClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
