// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zerok-ai/zk-utils-go/rules/model"

	repository "main/app/ruleengine/repository"

	zkerrors "main/app/utils/zkerrors"
)

// RulesRepo is an autogenerated mock type for the RulesRepo type
type RulesRepo struct {
	mock.Mock
}

// GetAllRules provides a mock function with given fields: filters
func (_m *RulesRepo) GetAllRules(filters *repository.RuleQueryFilter) (*[]model.FilterRule, *zkerrors.ZkError) {
	ret := _m.Called(filters)

	var r0 *[]model.FilterRule
	var r1 *zkerrors.ZkError
	if rf, ok := ret.Get(0).(func(*repository.RuleQueryFilter) (*[]model.FilterRule, *zkerrors.ZkError)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(*repository.RuleQueryFilter) *[]model.FilterRule); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.FilterRule)
		}
	}

	if rf, ok := ret.Get(1).(func(*repository.RuleQueryFilter) *zkerrors.ZkError); ok {
		r1 = rf(filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zkerrors.ZkError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewRulesRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRulesRepo creates a new instance of RulesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRulesRepo() *RulesRepo {
	mock := &RulesRepo{}
	return mock
}
